{"ast":null,"code":"import _asyncToGenerator from \"E:/my-projects/Example_project/grocery-app/grocery-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { WebPlugin } from '@capacitor/core';\nimport { VideoPlayer } from './web-utils/videoplayer';\nexport class CapacitorVideoPlayerWeb extends WebPlugin {\n  constructor() {\n    super();\n    this._players = [];\n    this.addListeners();\n  }\n  echo(options) {\n    return _asyncToGenerator(function* () {\n      return Promise.resolve({\n        result: true,\n        method: 'echo',\n        value: options\n      });\n    })();\n  }\n  /**\n   *  Player initialization\n   *\n   * @param options\n   */\n  initPlayer(options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'initPlayer',\n          message: 'Must provide a capVideoPlayerOptions object'\n        });\n      }\n      _this.mode = options.mode ? options.mode : '';\n      if (_this.mode == null || _this.mode.length === 0) {\n        return Promise.resolve({\n          result: false,\n          method: 'initPlayer',\n          message: 'Must provide a Mode (fullscreen/embedded)'\n        });\n      }\n      if (_this.mode === 'fullscreen' || _this.mode === 'embedded') {\n        const url = options.url ? options.url : '';\n        if (url == null || url.length === 0) {\n          return Promise.resolve({\n            result: false,\n            method: 'initPlayer',\n            message: 'Must provide a Video Url'\n          });\n        }\n        if (url == 'internal') {\n          return Promise.resolve({\n            result: false,\n            method: 'initPlayer',\n            message: 'Internal Videos not supported on Web Platform'\n          });\n        }\n        const playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n          return Promise.resolve({\n            result: false,\n            method: 'initPlayer',\n            message: 'Must provide a Player Id'\n          });\n        }\n        const rate = options.rate ? options.rate : 1.0;\n        let exitOnEnd = true;\n        if (Object.keys(options).includes('exitOnEnd')) {\n          const exitRet = options.exitOnEnd;\n          exitOnEnd = exitRet != null ? exitRet : true;\n        }\n        let loopOnEnd = false;\n        if (Object.keys(options).includes('loopOnEnd') && !exitOnEnd) {\n          const loopRet = options.loopOnEnd;\n          loopOnEnd = loopRet != null ? loopRet : false;\n        }\n        const componentTag = options.componentTag ? options.componentTag : '';\n        if (componentTag == null || componentTag.length === 0) {\n          return Promise.resolve({\n            result: false,\n            method: 'initPlayer',\n            message: 'Must provide a Component Tag'\n          });\n        }\n        let playerSize = null;\n        if (_this.mode === 'embedded') {\n          playerSize = _this.checkSize(options);\n        }\n        const result = yield _this._initializeVideoPlayer(url, playerId, _this.mode, rate, exitOnEnd, loopOnEnd, componentTag, playerSize);\n        return Promise.resolve({\n          result: result\n        });\n      } else {\n        return Promise.resolve({\n          result: false,\n          method: 'initPlayer',\n          message: 'Must provide a Mode either fullscreen or embedded)'\n        });\n      }\n    })();\n  }\n  /**\n   * Return if a given playerId is playing\n   *\n   * @param options\n   */\n  isPlaying(options) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'isPlaying',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      if (_this2._players[playerId]) {\n        const playing = _this2._players[playerId].isPlaying;\n        return Promise.resolve({\n          method: 'isPlaying',\n          result: true,\n          value: playing\n        });\n      } else {\n        return Promise.resolve({\n          method: 'isPlaying',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Play the current video from a given playerId\n   *\n   * @param options\n   */\n  play(options) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'play',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      if (_this3._players[playerId]) {\n        yield _this3._players[playerId].videoEl.play();\n        return Promise.resolve({\n          method: 'play',\n          result: true,\n          value: true\n        });\n      } else {\n        return Promise.resolve({\n          method: 'play',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Pause the current video from a given playerId\n   *\n   * @param options\n   */\n  pause(options) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'pause',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      if (_this4._players[playerId]) {\n        if (_this4._players[playerId].isPlaying) yield _this4._players[playerId].videoEl.pause();\n        return Promise.resolve({\n          method: 'pause',\n          result: true,\n          value: true\n        });\n      } else {\n        return Promise.resolve({\n          method: 'pause',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Get the duration of the current video from a given playerId\n   *\n   * @param options\n   */\n  getDuration(options) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'getDuration',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      if (_this5._players[playerId]) {\n        const duration = _this5._players[playerId].videoEl.duration;\n        return Promise.resolve({\n          method: 'getDuration',\n          result: true,\n          value: duration\n        });\n      } else {\n        return Promise.resolve({\n          method: 'getDuration',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Set the rate of the current video from a given playerId\n   *\n   * @param options\n   */\n  setRate(options) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'setRate',\n          message: 'Must provide a capVideoRateOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      const rateList = [0.25, 0.5, 0.75, 1.0, 2.0, 4.0];\n      const rate = options.rate && rateList.includes(options.rate) ? options.rate : 1.0;\n      if (_this6._players[playerId]) {\n        _this6._players[playerId].videoEl.playbackRate = rate;\n        return Promise.resolve({\n          method: 'setRate',\n          result: true,\n          value: rate\n        });\n      } else {\n        return Promise.resolve({\n          method: 'setRate',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Get the volume of the current video from a given playerId\n   *\n   * @param options\n   */\n  getRate(options) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'getRate',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      if (_this7._players[playerId]) {\n        const rate = _this7._players[playerId].videoEl.playbackRate;\n        return Promise.resolve({\n          method: 'getRate',\n          result: true,\n          value: rate\n        });\n      } else {\n        return Promise.resolve({\n          method: 'getRate',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Set the volume of the current video from a given playerId\n   *\n   * @param options\n   */\n  setVolume(options) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'setVolume',\n          message: 'Must provide a capVideoVolumeOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      const volume = options.volume ? options.volume : 0.5;\n      if (_this8._players[playerId]) {\n        _this8._players[playerId].videoEl.volume = volume;\n        return Promise.resolve({\n          method: 'setVolume',\n          result: true,\n          value: volume\n        });\n      } else {\n        return Promise.resolve({\n          method: 'setVolume',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Get the volume of the current video from a given playerId\n   *\n   * @param options\n   */\n  getVolume(options) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'getVolume',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      if (_this9._players[playerId]) {\n        const volume = _this9._players[playerId].videoEl.volume;\n        return Promise.resolve({\n          method: 'getVolume',\n          result: true,\n          value: volume\n        });\n      } else {\n        return Promise.resolve({\n          method: 'getVolume',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Set the muted property of the current video from a given playerId\n   *\n   * @param options\n   */\n  setMuted(options) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'setMuted',\n          message: 'Must provide a capVideoMutedOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      const muted = options.muted ? options.muted : false;\n      if (_this10._players[playerId]) {\n        _this10._players[playerId].videoEl.muted = muted;\n        return Promise.resolve({\n          method: 'setMuted',\n          result: true,\n          value: muted\n        });\n      } else {\n        return Promise.resolve({\n          method: 'setMuted',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Get the muted property of the current video from a given playerId\n   *\n   * @param options\n   */\n  getMuted(options) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'getMuted',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      if (_this11._players[playerId]) {\n        const muted = _this11._players[playerId].videoEl.muted;\n        return Promise.resolve({\n          method: 'getMuted',\n          result: true,\n          value: muted\n        });\n      } else {\n        return Promise.resolve({\n          method: 'getMuted',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Set the current time of the current video from a given playerId\n   *\n   * @param options\n   */\n  setCurrentTime(options) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'setCurrentTime',\n          message: 'Must provide a capVideoTimeOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      let seekTime = options.seektime ? options.seektime : 0;\n      if (_this12._players[playerId]) {\n        const duration = _this12._players[playerId].videoEl.duration;\n        seekTime = seekTime <= duration && seekTime >= 0 ? seekTime : duration / 2;\n        _this12._players[playerId].videoEl.currentTime = seekTime;\n        return Promise.resolve({\n          method: 'setCurrentTime',\n          result: true,\n          value: seekTime\n        });\n      } else {\n        return Promise.resolve({\n          method: 'setCurrentTime',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Get the current time of the current video from a given playerId\n   *\n   * @param options\n   */\n  getCurrentTime(options) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'getCurrentTime',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      if (_this13._players[playerId]) {\n        const seekTime = _this13._players[playerId].videoEl.currentTime;\n        return Promise.resolve({\n          method: 'getCurrentTime',\n          result: true,\n          value: seekTime\n        });\n      } else {\n        return Promise.resolve({\n          method: 'getCurrentTime',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Get the current time of the current video from a given playerId\n   *\n   */\n  stopAllPlayers() {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      for (const i in _this14._players) {\n        if (_this14._players[i].pipMode) {\n          const doc = document;\n          if (doc.pictureInPictureElement) {\n            yield doc.exitPictureInPicture();\n          }\n        }\n        if (!_this14._players[i].videoEl.paused) _this14._players[i].videoEl.pause();\n      }\n      return Promise.resolve({\n        method: 'stopAllPlayers',\n        result: true,\n        value: true\n      });\n    })();\n  }\n  /**\n   * Show controller\n   *\n   */\n  showController() {\n    return _asyncToGenerator(function* () {\n      return Promise.resolve({\n        method: 'showController',\n        result: true,\n        value: true\n      });\n    })();\n  }\n  /**\n   * isControllerIsFullyVisible\n   *\n   */\n  isControllerIsFullyVisible() {\n    return _asyncToGenerator(function* () {\n      return Promise.resolve({\n        method: 'isControllerIsFullyVisible',\n        result: true,\n        value: true\n      });\n    })();\n  }\n  /**\n   * Exit the current player\n   *\n   */\n  exitPlayer() {\n    return _asyncToGenerator(function* () {\n      return Promise.resolve({\n        method: 'exitPlayer',\n        result: true,\n        value: true\n      });\n    })();\n  }\n  checkSize(options) {\n    const playerSize = {\n      width: options.width ? options.width : 320,\n      height: options.height ? options.height : 180\n    };\n    const ratio = playerSize.height / playerSize.width;\n    if (playerSize.width > window.innerWidth) {\n      playerSize.width = window.innerWidth;\n      playerSize.height = Math.floor(playerSize.width * ratio);\n    }\n    if (playerSize.height > window.innerHeight) {\n      playerSize.height = window.innerHeight;\n      playerSize.width = Math.floor(playerSize.height / ratio);\n    }\n    return playerSize;\n  }\n  _initializeVideoPlayer(url, playerId, mode, rate, exitOnEnd, loopOnEnd, componentTag, playerSize) {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      const videoURL = url ? url.indexOf('%2F') == -1 ? encodeURI(url) : url : null;\n      if (videoURL === null) return Promise.resolve(false);\n      _this15.videoContainer = yield _this15._getContainerElement(playerId, componentTag);\n      if (_this15.videoContainer === null) return Promise.resolve({\n        method: 'initPlayer',\n        result: false,\n        message: 'componentTag or divContainerElement must be provided'\n      });\n      if (mode === 'embedded' && playerSize == null) return Promise.resolve({\n        method: 'initPlayer',\n        result: false,\n        message: 'playerSize must be defined in embedded mode'\n      });\n      if (mode === 'embedded') {\n        _this15._players[playerId] = new VideoPlayer('embedded', videoURL, playerId, rate, exitOnEnd, loopOnEnd, _this15.videoContainer, 2, playerSize.width, playerSize.height);\n        yield _this15._players[playerId].initialize();\n      } else if (mode === 'fullscreen') {\n        _this15._players['fullscreen'] = new VideoPlayer('fullscreen', videoURL, 'fullscreen', rate, exitOnEnd, loopOnEnd, _this15.videoContainer, 99995);\n        yield _this15._players['fullscreen'].initialize();\n      } else {\n        return Promise.resolve({\n          method: 'initPlayer',\n          result: false,\n          message: 'mode not supported'\n        });\n      }\n      return Promise.resolve({\n        method: 'initPlayer',\n        result: true,\n        value: true\n      });\n    })();\n  }\n  _getContainerElement(playerId, componentTag) {\n    return _asyncToGenerator(function* () {\n      const videoContainer = document.createElement('div');\n      videoContainer.id = `vc_${playerId}`;\n      if (componentTag != null && componentTag.length > 0) {\n        const cmpTagEl = document.querySelector(`${componentTag}`);\n        if (cmpTagEl === null) return Promise.resolve(null);\n        let container = null;\n        const shadowRoot = cmpTagEl.shadowRoot ? cmpTagEl.shadowRoot : null;\n        if (shadowRoot != null) {\n          container = shadowRoot.querySelector(`[id='${playerId}']`);\n        } else {\n          container = cmpTagEl.querySelector(`[id='${playerId}']`);\n        }\n        if (container != null) container.appendChild(videoContainer);\n        return Promise.resolve(videoContainer);\n      } else {\n        return Promise.resolve(null);\n      }\n    })();\n  }\n  handlePlayerPlay(data) {\n    this.notifyListeners('jeepCapVideoPlayerPlay', data);\n  }\n  handlePlayerPause(data) {\n    this.notifyListeners('jeepCapVideoPlayerPause', data);\n  }\n  handlePlayerEnded(data) {\n    var _a;\n    if (this.mode === 'fullscreen') {\n      (_a = this.videoContainer) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    this.removeListeners();\n    this.notifyListeners('jeepCapVideoPlayerEnded', data);\n  }\n  handlePlayerExit() {\n    var _a;\n    if (this.mode === 'fullscreen') {\n      (_a = this.videoContainer) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    const retData = {\n      dismiss: true\n    };\n    this.removeListeners();\n    this.notifyListeners('jeepCapVideoPlayerExit', retData);\n  }\n  handlePlayerReady(data) {\n    this.notifyListeners('jeepCapVideoPlayerReady', data);\n  }\n  addListeners() {\n    document.addEventListener('videoPlayerPlay', ev => {\n      this.handlePlayerPlay(ev.detail);\n    }, false);\n    document.addEventListener('videoPlayerPause', ev => {\n      this.handlePlayerPause(ev.detail);\n    }, false);\n    document.addEventListener('videoPlayerEnded', ev => {\n      this.handlePlayerEnded(ev.detail);\n    }, false);\n    document.addEventListener('videoPlayerReady', ev => {\n      this.handlePlayerReady(ev.detail);\n    }, false);\n    document.addEventListener('videoPlayerExit', () => {\n      this.handlePlayerExit();\n    }, false);\n  }\n  removeListeners() {\n    document.removeEventListener('videoPlayerPlay', ev => {\n      this.handlePlayerPlay(ev.detail);\n    }, false);\n    document.removeEventListener('videoPlayerPause', ev => {\n      this.handlePlayerPause(ev.detail);\n    }, false);\n    document.removeEventListener('videoPlayerEnded', ev => {\n      this.handlePlayerEnded(ev.detail);\n    }, false);\n    document.removeEventListener('videoPlayerReady', ev => {\n      this.handlePlayerReady(ev.detail);\n    }, false);\n    document.removeEventListener('videoPlayerExit', () => {\n      this.handlePlayerExit();\n    }, false);\n  }\n}\n//# sourceMappingURL=web.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}