{"ast":null,"code":"import _asyncToGenerator from \"E:/my-projects/Example_project/grocery-app/grocery-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { Filesystem, Directory } from '@capacitor/filesystem';\nimport * as i0 from \"@angular/core\";\nexport class VedioserviceService {\n  constructor() {\n    this.videos = [];\n    this.VIDEOS_KEY = 'videos';\n    this.convertBlobToBase64 = blob => new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onerror = reject;\n      reader.onload = () => {\n        resolve(reader.result);\n      };\n      reader.readAsDataURL(blob);\n    });\n  }\n  loadVideos() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const videoList = yield Storage.get({\n        key: _this.VIDEOS_KEY\n      });\n      _this.videos = JSON.parse(videoList.value) || [];\n      return _this.videos;\n    })();\n  }\n  storeVideo(blob) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const fileName = new Date().getTime() + '.mp4';\n      const base64Data = yield _this2.convertBlobToBase64(blob);\n      const savedFile = yield Filesystem.writeFile({\n        path: fileName,\n        data: base64Data,\n        directory: Directory.Data\n      });\n      // Add file to local array\n      _this2.videos.unshift(savedFile.uri);\n      // Write information to storage\n      return Storage.set({\n        key: _this2.VIDEOS_KEY,\n        value: JSON.stringify(_this2.videos)\n      });\n    })();\n  }\n  getVideoUrl(fullPath) {\n    return _asyncToGenerator(function* () {\n      const path = fullPath.substr(fullPath.lastIndexOf('/') + 1);\n      const file = yield Filesystem.readFile({\n        path: path,\n        directory: Directory.Data\n      });\n      return `data:video/mp4;base64,${file.data}`;\n    })();\n  }\n}\n_class = VedioserviceService;\n_class.ɵfac = function VedioserviceService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Filesystem","Directory","VedioserviceService","constructor","videos","VIDEOS_KEY","convertBlobToBase64","blob","Promise","resolve","reject","reader","FileReader","onerror","onload","result","readAsDataURL","loadVideos","_this","_asyncToGenerator","videoList","Storage","get","key","JSON","parse","value","storeVideo","_this2","fileName","Date","getTime","base64Data","savedFile","writeFile","path","data","directory","Data","unshift","uri","set","stringify","getVideoUrl","fullPath","substr","lastIndexOf","file","readFile","factory","ɵfac","providedIn"],"sources":["E:\\my-projects\\Example_project\\grocery-app\\grocery-app\\src\\app\\vedioservice.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  Filesystem, Directory\r\n} from '@capacitor/filesystem';\r\n \r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VedioserviceService {\r\n  public videos = [];\r\n  private VIDEOS_KEY: string = 'videos';\r\n \r\n  constructor() {}\r\n \r\n  async loadVideos() {\r\n    const videoList = await Storage.get({ key: this.VIDEOS_KEY });\r\n    this.videos = JSON.parse(videoList.value) || [];\r\n    return this.videos;\r\n  }\r\n \r\n  async storeVideo(blob:any) {\r\n    const fileName = new Date().getTime() + '.mp4';\r\n \r\n    const base64Data = await this.convertBlobToBase64(blob) as string;\r\n    const savedFile = await Filesystem.writeFile({\r\n      path: fileName,\r\n      data: base64Data,\r\n      directory: Directory.Data\r\n    });\r\n \r\n    // Add file to local array\r\n    this.videos.unshift(savedFile.uri);\r\n \r\n    // Write information to storage\r\n    return Storage.set({\r\n      key: this.VIDEOS_KEY,\r\n      value: JSON.stringify(this.videos)\r\n    });\r\n  }\r\n \r\n  private convertBlobToBase64 = (blob: Blob) => new Promise((resolve, reject) => {\r\n    const reader = new FileReader;\r\n    reader.onerror = reject;\r\n    reader.onload = () => {\r\n      resolve(reader.result);\r\n    };\r\n    reader.readAsDataURL(blob);\r\n  });\r\n \r\n  async getVideoUrl(fullPath:any) {\r\n    const path = fullPath.substr(fullPath.lastIndexOf('/') + 1);\r\n    const file = await Filesystem.readFile({\r\n      path: path,\r\n      directory: Directory.Data\r\n    });\r\n    return `data:video/mp4;base64,${file.data}`;\r\n  }\r\n}\r\n"],"mappings":";;AACA,SACEA,UAAU,EAAEC,SAAS,QAChB,uBAAuB;;AAK9B,OAAM,MAAOC,mBAAmB;EAI9BC,YAAA;IAHO,KAAAC,MAAM,GAAG,EAAE;IACV,KAAAC,UAAU,GAAW,QAAQ;IA8B7B,KAAAC,mBAAmB,GAAIC,IAAU,IAAK,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MAC5E,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAV,CAAU;MAC7BD,MAAM,CAACE,OAAO,GAAGH,MAAM;MACvBC,MAAM,CAACG,MAAM,GAAG,MAAK;QACnBL,OAAO,CAACE,MAAM,CAACI,MAAM,CAAC;MACxB,CAAC;MACDJ,MAAM,CAACK,aAAa,CAACT,IAAI,CAAC;IAC5B,CAAC,CAAC;EAnCa;EAETU,UAAUA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACd,MAAMC,SAAS,SAASC,OAAO,CAACC,GAAG,CAAC;QAAEC,GAAG,EAAEL,KAAI,CAACb;MAAU,CAAE,CAAC;MAC7Da,KAAI,CAACd,MAAM,GAAGoB,IAAI,CAACC,KAAK,CAACL,SAAS,CAACM,KAAK,CAAC,IAAI,EAAE;MAC/C,OAAOR,KAAI,CAACd,MAAM;IAAC;EACrB;EAEMuB,UAAUA,CAACpB,IAAQ;IAAA,IAAAqB,MAAA;IAAA,OAAAT,iBAAA;MACvB,MAAMU,QAAQ,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,MAAM;MAE9C,MAAMC,UAAU,SAASJ,MAAI,CAACtB,mBAAmB,CAACC,IAAI,CAAW;MACjE,MAAM0B,SAAS,SAASjC,UAAU,CAACkC,SAAS,CAAC;QAC3CC,IAAI,EAAEN,QAAQ;QACdO,IAAI,EAAEJ,UAAU;QAChBK,SAAS,EAAEpC,SAAS,CAACqC;OACtB,CAAC;MAEF;MACAV,MAAI,CAACxB,MAAM,CAACmC,OAAO,CAACN,SAAS,CAACO,GAAG,CAAC;MAElC;MACA,OAAOnB,OAAO,CAACoB,GAAG,CAAC;QACjBlB,GAAG,EAAEK,MAAI,CAACvB,UAAU;QACpBqB,KAAK,EAAEF,IAAI,CAACkB,SAAS,CAACd,MAAI,CAACxB,MAAM;OAClC,CAAC;IAAC;EACL;EAWMuC,WAAWA,CAACC,QAAY;IAAA,OAAAzB,iBAAA;MAC5B,MAAMgB,IAAI,GAAGS,QAAQ,CAACC,MAAM,CAACD,QAAQ,CAACE,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MAC3D,MAAMC,IAAI,SAAS/C,UAAU,CAACgD,QAAQ,CAAC;QACrCb,IAAI,EAAEA,IAAI;QACVE,SAAS,EAAEpC,SAAS,CAACqC;OACtB,CAAC;MACF,OAAO,yBAAyBS,IAAI,CAACX,IAAI,EAAE;IAAC;EAC9C;;SAhDWlC,mBAAmB;;mBAAnBA,MAAmB;AAAA;;SAAnBA,MAAmB;EAAA+C,OAAA,EAAnB/C,MAAmB,CAAAgD,IAAA;EAAAC,UAAA,EAFlB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}