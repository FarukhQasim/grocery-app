{"ast":null,"code":"import _asyncToGenerator from \"E:/my-projects/Example_project/grocery-app/grocery-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport Hls from 'hls.js';\nexport class VideoPlayer {\n  constructor(mode, url, playerId, rate, exitOnEnd, loopOnEnd, container, zIndex, width, height) {\n    this.pipMode = false;\n    this._videoType = null;\n    this._videoContainer = null;\n    this._firstReadyToPlay = true;\n    this._isEnded = false;\n    this._videoRate = 1.0;\n    this._videoExitOnEnd = true;\n    this._videoLoopOnEnd = false;\n    this._url = url;\n    this._container = container;\n    this._mode = mode;\n    this._width = width ? width : 320;\n    this._height = height ? height : 180;\n    this._mode = mode;\n    this._videoRate = rate;\n    this._zIndex = zIndex ? zIndex : 1;\n    this._playerId = playerId;\n    this._videoExitOnEnd = exitOnEnd;\n    this._videoLoopOnEnd = loopOnEnd;\n  }\n  initialize() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // get the video type\n      const retB = _this._getVideoType();\n      if (retB) {\n        // style the container\n        if (_this._mode === 'fullscreen') {\n          _this._container.style.position = 'absolute';\n          _this._container.style.width = '100vw';\n          _this._container.style.height = '100vh';\n        }\n        if (_this._mode === 'embedded') {\n          _this._container.style.position = 'relative';\n          _this._container.style.width = _this._width.toString() + 'px';\n          _this._container.style.height = _this._height.toString() + 'px';\n        }\n        _this._container.style.left = '0';\n        _this._container.style.top = '0';\n        _this._container.style.display = 'flex';\n        _this._container.style.alignItems = 'center';\n        _this._container.style.justifyContent = 'center';\n        _this._container.style.backgroundColor = '#000000';\n        _this._container.style.zIndex = _this._zIndex.toString();\n        const width = _this._mode === 'fullscreen' ? window.innerWidth /*this._container.offsetWidth*/ : _this._width;\n        const height = _this._mode === 'fullscreen' ? window.innerHeight /*this._container.offsetHeight*/ : _this._height;\n        const xmlns = 'http://www.w3.org/2000/svg';\n        const svg = document.createElementNS(xmlns, 'svg');\n        svg.setAttributeNS(null, 'width', width.toString());\n        svg.setAttributeNS(null, 'height', height.toString());\n        const viewbox = '0 0 ' + width.toString() + ' ' + height.toString();\n        svg.setAttributeNS(null, 'viewBox', viewbox);\n        svg.style.zIndex = (_this._zIndex + 1).toString();\n        const rect = document.createElementNS(xmlns, 'rect');\n        rect.setAttributeNS(null, 'x', '0');\n        rect.setAttributeNS(null, 'y', '0');\n        rect.setAttributeNS(null, 'width', width.toString());\n        rect.setAttributeNS(null, 'height', height.toString());\n        rect.setAttributeNS(null, 'fill', '#000000');\n        svg.appendChild(rect);\n        _this._container.appendChild(svg);\n        const heightVideo = width * _this._height / _this._width;\n        _this._videoContainer = document.createElement('div');\n        _this._videoContainer.style.position = 'absolute';\n        _this._videoContainer.style.left = '0';\n        _this._videoContainer.style.width = width.toString() + 'px';\n        _this._videoContainer.style.height = heightVideo.toString() + 'px';\n        _this._videoContainer.style.zIndex = (_this._zIndex + 2).toString();\n        _this._container.appendChild(_this._videoContainer);\n        /*   Create Video Element */\n        const isCreated = yield _this.createVideoElement(width, heightVideo);\n        if (!isCreated) {\n          _this._createEvent('Exit', _this._playerId, 'Video Error: failed to create the Video Element');\n        }\n      } else {\n        _this._createEvent('Exit', _this._playerId, 'Url Error: type not supported');\n      }\n      return;\n    })();\n  }\n  createVideoElement(width, height) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.videoEl = document.createElement('video');\n      _this2.videoEl.controls = true;\n      _this2.videoEl.style.zIndex = (_this2._zIndex + 3).toString();\n      _this2.videoEl.style.width = `${width.toString()}px`;\n      _this2.videoEl.style.height = `${height.toString()}px`;\n      _this2.videoEl.playbackRate = _this2._videoRate;\n      _this2._videoContainer.appendChild(_this2.videoEl);\n      // set the player\n      const isSet = yield _this2._setPlayer();\n      if (isSet) {\n        _this2.videoEl.onended = /*#__PURE__*/_asyncToGenerator(function* () {\n          _this2._isEnded = true;\n          _this2.isPlaying = false;\n          if (_this2.videoEl) {\n            _this2.videoEl.currentTime = 0;\n          }\n          if (_this2._videoExitOnEnd) {\n            if (_this2._mode === 'fullscreen') {\n              _this2._closeFullscreen();\n            }\n            _this2._createEvent('Ended', _this2._playerId);\n          } else {\n            if (_this2._videoLoopOnEnd && _this2.videoEl != null) {\n              yield _this2.videoEl.play();\n            }\n          }\n        });\n        _this2.videoEl.oncanplay = /*#__PURE__*/_asyncToGenerator(function* () {\n          if (_this2._firstReadyToPlay) {\n            _this2._createEvent('Ready', _this2._playerId);\n            if (_this2.videoEl != null) {\n              _this2.videoEl.muted = false;\n              if (_this2._mode === 'fullscreen') yield _this2.videoEl.play();\n              _this2._firstReadyToPlay = false;\n            }\n          }\n        });\n        _this2.videoEl.onplay = () => {\n          _this2.isPlaying = true;\n          if (_this2._firstReadyToPlay) _this2._firstReadyToPlay = false;\n          _this2._createEvent('Play', _this2._playerId);\n        };\n        _this2.videoEl.onplaying = () => {\n          _this2._createEvent('Playing', _this2._playerId);\n        };\n        _this2.videoEl.onpause = () => {\n          _this2.isPlaying = false;\n          _this2._createEvent('Pause', _this2._playerId);\n        };\n        if (_this2._mode === 'fullscreen') {\n          // create the video player exit button\n          const exitEl = document.createElement('button');\n          exitEl.textContent = 'X';\n          exitEl.style.position = 'absolute';\n          exitEl.style.left = '1%';\n          exitEl.style.top = '5%';\n          exitEl.style.width = '5vmin';\n          exitEl.style.padding = '0.5%';\n          exitEl.style.fontSize = '1.2rem';\n          exitEl.style.background = 'rgba(51,51,51,.4)';\n          exitEl.style.color = '#fff';\n          exitEl.style.visibility = 'hidden';\n          exitEl.style.zIndex = (_this2._zIndex + 4).toString();\n          exitEl.style.border = '1px solid rgba(51,51,51,.4)';\n          exitEl.style.borderRadius = '20px';\n          _this2._videoContainer.onclick = /*#__PURE__*/_asyncToGenerator(function* () {\n            _this2._initial = yield _this2._doHide(exitEl, 3000);\n          });\n          _this2._videoContainer.ontouchstart = /*#__PURE__*/_asyncToGenerator(function* () {\n            _this2._initial = yield _this2._doHide(exitEl, 3000);\n          });\n          _this2._videoContainer.onmousemove = /*#__PURE__*/_asyncToGenerator(function* () {\n            _this2._initial = yield _this2._doHide(exitEl, 3000);\n          });\n          exitEl.onclick = () => {\n            _this2._createEvent('Exit', _this2._playerId);\n          };\n          exitEl.ontouchstart = () => {\n            _this2._createEvent('Exit', _this2._playerId);\n          };\n          _this2._videoContainer.appendChild(exitEl);\n          _this2._initial = yield _this2._doHide(exitEl, 3000);\n          _this2._goFullscreen();\n        }\n      }\n      return isSet;\n    })();\n  }\n  _goFullscreen() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3._container.mozRequestFullScreen) {\n        /* Firefox */\n        _this3._container.mozRequestFullScreen();\n      } else if (_this3._container.webkitRequestFullscreen) {\n        /* Chrome, Safari & Opera */\n        _this3._container.webkitRequestFullscreen();\n      } else if (_this3._container.msRequestFullscreen) {\n        /* IE/Edge */\n        _this3._container.msRequestFullscreen();\n      } else if (_this3._container.requestFullscreen) {\n        _this3._container.requestFullscreen();\n      }\n      return;\n    })();\n  }\n  _setPlayer() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return new Promise(resolve => {\n        if (_this4.videoEl != null) {\n          if (Hls.isSupported() && _this4._videoType === 'application/x-mpegURL') {\n            const hls = new Hls();\n            hls.loadSource(_this4._url);\n            hls.attachMedia(_this4.videoEl);\n            hls.on(Hls.Events.MANIFEST_PARSED, () => {\n              if (_this4.videoEl != null) {\n                _this4.videoEl.muted = true;\n                _this4.videoEl.crossOrigin = 'anonymous';\n                resolve(true);\n              } else {\n                resolve(false);\n              }\n            });\n          } else if (_this4._videoType === 'video/mp4') {\n            // CMAF (fMP4) && MP4\n            _this4.videoEl.src = _this4._url;\n            if (_this4._url.substring(0, 5) != 'https' && _this4._url.substring(0, 4) === 'http') _this4.videoEl.crossOrigin = 'anonymous';\n            if (_this4._url.substring(0, 5) === 'https' || _this4._url.substring(0, 4) === 'http') _this4.videoEl.muted = true;\n            resolve(true);\n          } else {\n            // Not Supported\n            resolve(false);\n          }\n          _this4.videoEl.addEventListener('enterpictureinpicture', event => {\n            _this4.pipWindow = event.pictureInPictureWindow;\n            _this4.pipMode = true;\n            _this4._closeFullscreen();\n          });\n          _this4.videoEl.addEventListener('leavepictureinpicture', () => {\n            _this4.pipMode = false;\n            if (!_this4._isEnded) {\n              _this4._goFullscreen();\n              if (_this4.videoEl != null) _this4.videoEl.play();\n            }\n          });\n        } else {\n          resolve(false);\n        }\n      });\n    })();\n  }\n  _getVideoType() {\n    let ret = false;\n    let vType = '';\n    const sUrl = this._url ? this._url : '';\n    if (sUrl != null && sUrl.length > 0) {\n      try {\n        const val = sUrl.substring(sUrl.lastIndexOf('/')).match(/(.*)\\.(.*)/);\n        if (val == null) {\n          vType = '';\n        } else {\n          const a = sUrl.match(/(.*)\\.(.*)/);\n          vType = a != null ? a[2].split('?')[0] : '';\n        }\n        switch (vType) {\n          case 'mp4':\n          case '':\n          case 'webm':\n          case 'cmaf':\n          case 'cmfv':\n          case 'cmfa':\n            {\n              this._videoType = 'video/mp4';\n              break;\n            }\n          case 'm3u8':\n            {\n              this._videoType = 'application/x-mpegURL';\n              break;\n            }\n          /*\n                  case \"mpd\" : {\n                  this._videoType = \"application/dash+xml\";\n                  break;\n                  }\n          */\n          /*\n                  case \"youtube\" : {\n                  this._videoType = \"video/youtube\";\n                  break;\n                  }\n          */\n          default:\n            {\n              this._videoType = null;\n              break;\n            }\n        }\n        ret = true;\n      } catch (_a) {\n        ret = false;\n      }\n    }\n    return ret;\n  }\n  _doHide(exitEl, duration) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      clearTimeout(_this5._initial);\n      exitEl.style.visibility = 'visible';\n      const initial = setTimeout(() => {\n        exitEl.style.visibility = 'hidden';\n      }, duration);\n      return initial;\n    })();\n  }\n  _createEvent(ev, playerId, msg) {\n    const message = msg ? msg : null;\n    let event;\n    if (message != null) {\n      event = new CustomEvent(`videoPlayer${ev}`, {\n        detail: {\n          fromPlayerId: playerId,\n          message: message\n        }\n      });\n    } else {\n      const currentTime = this.videoEl ? this.videoEl.currentTime : 0;\n      event = new CustomEvent(`videoPlayer${ev}`, {\n        detail: {\n          fromPlayerId: playerId,\n          currentTime: currentTime\n        }\n      });\n    }\n    document.dispatchEvent(event);\n  }\n  _closeFullscreen() {\n    const mydoc = document;\n    const isInFullScreen = mydoc.fullscreenElement && mydoc.fullscreenElement !== null || mydoc.webkitFullscreenElement && mydoc.webkitFullscreenElement !== null || mydoc.mozFullScreenElement && mydoc.mozFullScreenElement !== null || mydoc.msFullscreenElement && mydoc.msFullscreenElement !== null;\n    if (isInFullScreen) {\n      if (mydoc.mozCancelFullScreen) {\n        mydoc.mozCancelFullScreen();\n      } else if (mydoc.webkitExitFullscreen) {\n        mydoc.webkitExitFullscreen();\n      } else if (mydoc.msExitFullscreen) {\n        mydoc.msExitFullscreen();\n      } else if (mydoc.exitFullscreen) {\n        mydoc.exitFullscreen();\n      }\n    }\n  }\n}\n//# sourceMappingURL=videoplayer.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}